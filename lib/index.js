// Generated by CoffeeScript 1.7.1
(function() {
  var Retina, convert, exec, fs, info, path;

  info = require('netpbm').info;

  convert = require('netpbm').convert;

  exec = require('child_process').exec;

  fs = require('fs');

  path = require('path');

  module.exports = Retina = (function() {
    Retina.prototype.brunchPlugin = true;

    Retina.prototype.formats = ['gif', 'jpeg', 'jpg', 'png'];

    Retina.prototype._resize_binary = 'pnmscale';

    Retina.prototype.imagePath = 'images';

    Retina.prototype.retinaRe = /(@2[xX])\.(?:gif|jpeg|jpg|png)$/;

    Retina.prototype.minWidth = 0;

    Retina.prototype.minHeight = 0;

    function Retina(config) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.config = config;
      if ((_ref = this.config.plugins) != null ? (_ref1 = _ref.retina) != null ? _ref1.minWidth : void 0 : void 0) {
        this.minWidth = this.config.plugins.retina.minWidth;
      }
      if ((_ref2 = this.config.plugins) != null ? (_ref3 = _ref2.retina) != null ? _ref3.minHeight : void 0 : void 0) {
        this.minHeight = this.config.plugins.retina.minHeight;
      }
      if ((_ref4 = this.config.plugins) != null ? (_ref5 = _ref4.retina) != null ? _ref5.regexp : void 0 : void 0) {
        this.retinaRe = this.config.plugins.retina.regexp;
      }
      if ((_ref6 = this.config.plugins) != null ? (_ref7 = _ref6.retina) != null ? _ref7.path : void 0 : void 0) {
        this.imagePath = this.config.plugins.retina.path;
      }
      this.assetsPath = this.config.paths["public"];
      if ((_ref8 = this.config.plugins) != null ? (_ref9 = _ref8.retina) != null ? _ref9.assetsPath : void 0 : void 0) {
        this.assetsPath = this.config.plugins.retina.assetsPath;
      }
      this.imagePath = path.join(this.assetsPath, this.imagePath);
      exec("" + this._resize_binary + " --version", (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            return console.error("You need to have pnmscale installed. This is usually done with netpbm. Try brew install netpbm if you use homebrew.");
          }
        };
      })(this));
      null;
    }

    Retina.prototype.onCompile = function(generatedFiles) {
      var baseDirectory, f, imageFiles, normalPath, retinaFilepaths, retinaPath, _i, _len, _results;
      baseDirectory = this.imagePath.replace(/\/$/, '');
      imageFiles = this.fetchFiles(baseDirectory);
      retinaFilepaths = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = imageFiles.length; _i < _len; _i++) {
          f = imageFiles[_i];
          if (this.retinaRe.test(f)) {
            _results.push(f);
          }
        }
        return _results;
      }).call(this);
      _results = [];
      for (_i = 0, _len = retinaFilepaths.length; _i < _len; _i++) {
        retinaPath = retinaFilepaths[_i];
        normalPath = this.getNormalFilepath(retinaPath);
        if (!this.normalExists(normalPath)) {
          _results.push(this.createNormal(normalPath, retinaPath));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Retina.prototype.fetchFiles = function(directory) {
      var recursiveFetch;
      recursiveFetch = function(directory) {
        var d, directoryFiles, fileFiles, files, isDirectory, isFile, nextDirectories, prependBase, _i, _len;
        files = [];
        prependBase = function(filename) {
          return path.join(directory, filename);
        };
        isDirectory = function(filename) {
          return fs.statSync(prependBase(filename)).isDirectory();
        };
        isFile = function(filename) {
          return fs.statSync(prependBase(filename)).isFile();
        };
        directoryFiles = fs.readdirSync(directory);
        nextDirectories = directoryFiles.filter(isDirectory);
        fileFiles = directoryFiles.filter(isFile).map(prependBase);
        files = files.concat(fileFiles);
        for (_i = 0, _len = nextDirectories.length; _i < _len; _i++) {
          d = nextDirectories[_i];
          files = files.concat(recursiveFetch(prependBase(d)));
        }
        return files;
      };
      return recursiveFetch(directory);
    };

    Retina.prototype.createNormal = function(normalPath, retinaPath) {
      return info(retinaPath, (function(_this) {
        return function(error, result) {
          var height, opts, width;
          if (error) {
            console.error("retina-brunch couldn't get file info of `" + retinaPath + "`. Error: `" + error + "`");
            return;
          }
          width = result.width, height = result.height;
          width = Math.round(width / 2);
          height = Math.round(height / 2);
          opts = {
            width: width,
            height: height,
            alpha: true
          };
          if (width > _this.minWidth && height > _this.minHeight) {
            return convert(retinaPath, normalPath, opts, function(error) {
              if (error) {
                return console.error("retina-brunch couldn't convert `" + retinaPath + "`. Error: `" + error + "`");
              }
            });
          }
        };
      })(this));
    };

    Retina.prototype.normalExists = function(normalPath) {
      return fs.existsSync(normalPath);
    };

    Retina.prototype.getNormalFilepath = function(filepath) {
      var index, match, original, result;
      result = this.retinaRe.exec(filepath);
      original = result[0], match = result[1];
      index = result.index;
      return "" + filepath.slice(0, index) + filepath.slice(index + match.length);
    };

    return Retina;

  })();

}).call(this);
